plugins {
    id "fabric-loom" version "0.7-SNAPSHOT"
    id "com.github.johnrengelman.shadow" version "6.0.0"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    // Allow for maven to use github using jitpack.io
    maven {
        url "https://jitpack.io"
    }
}

dependencies {
    def dependency = {
        id ->
            modImplementation id
            shadow id
    }

    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Other helpers
    dependency "com.github.ZeroMemes:Alpine:1.9"
}

loom {
    accessWidener = file("src/resources/kairyou.accesswidener") // is called accessWidenerPath for loom 0.9+
}

shadowJar {
    configurations = [ project.configurations.shadow ]
}

processResources {
    inputs.property "version", project.version

    // Include fabric.mod.json (with the version dynamicly ajusted)
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    // Include everything else in the folder too
    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }

    // Include the license file
    from "LICENSE"
}

// Ensure that the encoding is set to UTF-8, no matter what the system default is
// This fixes some edge cases with special characters not displaying correctly
// See http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

sourceSets {
    main {
        java {
            srcDirs = ["src/java"]
        }
        resources {
            srcDirs = ["src/resources"]
        }
    }
}

remapJar {
    dependsOn shadowJar
    input.set(shadowJar.archiveFile)
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
// If you remove this task, sources will not be generated.
// It is useful for development but completely unnecessary for building
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}
